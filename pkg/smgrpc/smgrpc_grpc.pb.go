// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package smgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatClient is the client API for Stat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatClient interface {
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Stat_GetAllClient, error)
}

type statClient struct {
	cc grpc.ClientConnInterface
}

func NewStatClient(cc grpc.ClientConnInterface) StatClient {
	return &statClient{cc}
}

func (c *statClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Stat_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stat_ServiceDesc.Streams[0], "/smgrpc.Stat/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &statGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stat_GetAllClient interface {
	Recv() (*All, error)
	grpc.ClientStream
}

type statGetAllClient struct {
	grpc.ClientStream
}

func (x *statGetAllClient) Recv() (*All, error) {
	m := new(All)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatServer is the server API for Stat service.
// All implementations must embed UnimplementedStatServer
// for forward compatibility
type StatServer interface {
	GetAll(*Request, Stat_GetAllServer) error
	mustEmbedUnimplementedStatServer()
}

// UnimplementedStatServer must be embedded to have forward compatible implementations.
type UnimplementedStatServer struct {
}

func (UnimplementedStatServer) GetAll(*Request, Stat_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedStatServer) mustEmbedUnimplementedStatServer() {}

// UnsafeStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServer will
// result in compilation errors.
type UnsafeStatServer interface {
	mustEmbedUnimplementedStatServer()
}

func RegisterStatServer(s grpc.ServiceRegistrar, srv StatServer) {
	s.RegisterService(&Stat_ServiceDesc, srv)
}

func _Stat_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatServer).GetAll(m, &statGetAllServer{stream})
}

type Stat_GetAllServer interface {
	Send(*All) error
	grpc.ServerStream
}

type statGetAllServer struct {
	grpc.ServerStream
}

func (x *statGetAllServer) Send(m *All) error {
	return x.ServerStream.SendMsg(m)
}

// Stat_ServiceDesc is the grpc.ServiceDesc for Stat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smgrpc.Stat",
	HandlerType: (*StatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _Stat_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/smgrpc/smgrpc.proto",
}
